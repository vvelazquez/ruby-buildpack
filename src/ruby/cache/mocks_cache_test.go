// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

package cache_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStager is a mock of Stager interface
type MockStager struct {
	ctrl     *gomock.Controller
	recorder *MockStagerMockRecorder
}

// MockStagerMockRecorder is the mock recorder for MockStager
type MockStagerMockRecorder struct {
	mock *MockStager
}

// NewMockStager creates a new mock instance
func NewMockStager(ctrl *gomock.Controller) *MockStager {
	mock := &MockStager{ctrl: ctrl}
	mock.recorder = &MockStagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStager) EXPECT() *MockStagerMockRecorder {
	return _m.recorder
}

// BuildDir mocks base method
func (_m *MockStager) BuildDir() string {
	ret := _m.ctrl.Call(_m, "BuildDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildDir indicates an expected call of BuildDir
func (_mr *MockStagerMockRecorder) BuildDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BuildDir", reflect.TypeOf((*MockStager)(nil).BuildDir))
}

// CacheDir mocks base method
func (_m *MockStager) CacheDir() string {
	ret := _m.ctrl.Call(_m, "CacheDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// CacheDir indicates an expected call of CacheDir
func (_mr *MockStagerMockRecorder) CacheDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CacheDir", reflect.TypeOf((*MockStager)(nil).CacheDir))
}

// DepDir mocks base method
func (_m *MockStager) DepDir() string {
	ret := _m.ctrl.Call(_m, "DepDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// DepDir indicates an expected call of DepDir
func (_mr *MockStagerMockRecorder) DepDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DepDir", reflect.TypeOf((*MockStager)(nil).DepDir))
}

// MockYAML is a mock of YAML interface
type MockYAML struct {
	ctrl     *gomock.Controller
	recorder *MockYAMLMockRecorder
}

// MockYAMLMockRecorder is the mock recorder for MockYAML
type MockYAMLMockRecorder struct {
	mock *MockYAML
}

// NewMockYAML creates a new mock instance
func NewMockYAML(ctrl *gomock.Controller) *MockYAML {
	mock := &MockYAML{ctrl: ctrl}
	mock.recorder = &MockYAMLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockYAML) EXPECT() *MockYAMLMockRecorder {
	return _m.recorder
}

// Load mocks base method
func (_m *MockYAML) Load(file string, obj interface{}) error {
	ret := _m.ctrl.Call(_m, "Load", file, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load
func (_mr *MockYAMLMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Load", reflect.TypeOf((*MockYAML)(nil).Load), arg0, arg1)
}

// Write mocks base method
func (_m *MockYAML) Write(dest string, obj interface{}) error {
	ret := _m.ctrl.Call(_m, "Write", dest, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockYAMLMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockYAML)(nil).Write), arg0, arg1)
}
