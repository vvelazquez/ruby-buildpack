// Code generated by MockGen. DO NOT EDIT.
// Source: release.go

package finalize_test

import (
	semver "github.com/blang/semver"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVersions is a mock of Versions interface
type MockVersions struct {
	ctrl     *gomock.Controller
	recorder *MockVersionsMockRecorder
}

// MockVersionsMockRecorder is the mock recorder for MockVersions
type MockVersionsMockRecorder struct {
	mock *MockVersions
}

// NewMockVersions creates a new mock instance
func NewMockVersions(ctrl *gomock.Controller) *MockVersions {
	mock := &MockVersions{ctrl: ctrl}
	mock.recorder = &MockVersionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockVersions) EXPECT() *MockVersionsMockRecorder {
	return _m.recorder
}

// HasGem mocks base method
func (_m *MockVersions) HasGem(_param0 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "HasGem", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasGem indicates an expected call of HasGem
func (_mr *MockVersionsMockRecorder) HasGem(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HasGem", reflect.TypeOf((*MockVersions)(nil).HasGem), arg0)
}

// GemVersion mocks base method
func (_m *MockVersions) GemVersion(_param0 string) (*semver.Version, error) {
	ret := _m.ctrl.Call(_m, "GemVersion", _param0)
	ret0, _ := ret[0].(*semver.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GemVersion indicates an expected call of GemVersion
func (_mr *MockVersionsMockRecorder) GemVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GemVersion", reflect.TypeOf((*MockVersions)(nil).GemVersion), arg0)
}
