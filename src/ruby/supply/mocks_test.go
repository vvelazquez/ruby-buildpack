// Automatically generated by MockGen. DO NOT EDIT!
// Source: supply.go

package supply_test

import (
	libbuildpack "github.com/cloudfoundry/libbuildpack"
	gomock "github.com/golang/mock/gomock"
	io "io"
)

// Mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *_MockCacheRecorder
}

// Recorder for MockCache (not exported)
type _MockCacheRecorder struct {
	mock *MockCache
}

func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &_MockCacheRecorder{mock}
	return mock
}

func (_m *MockCache) EXPECT() *_MockCacheRecorder {
	return _m.recorder
}

func (_m *MockCache) Initialize() error {
	ret := _m.ctrl.Call(_m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCacheRecorder) Initialize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Initialize")
}

func (_m *MockCache) Restore() error {
	ret := _m.ctrl.Call(_m, "Restore")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCacheRecorder) Restore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Restore")
}

func (_m *MockCache) Save() error {
	ret := _m.ctrl.Call(_m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCacheRecorder) Save() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save")
}

// Mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandRecorder
}

// Recorder for MockCommand (not exported)
type _MockCommandRecorder struct {
	mock *MockCommand
}

func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &_MockCommandRecorder{mock}
	return mock
}

func (_m *MockCommand) EXPECT() *_MockCommandRecorder {
	return _m.recorder
}

func (_m *MockCommand) Execute(_param0 string, _param1 io.Writer, _param2 io.Writer, _param3 string, _param4 ...string) error {
	_s := []interface{}{_param0, _param1, _param2, _param3}
	for _, _x := range _param4 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Execute", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Execute(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Execute", _s...)
}

// Mock of Manifest interface
type MockManifest struct {
	ctrl     *gomock.Controller
	recorder *_MockManifestRecorder
}

// Recorder for MockManifest (not exported)
type _MockManifestRecorder struct {
	mock *MockManifest
}

func NewMockManifest(ctrl *gomock.Controller) *MockManifest {
	mock := &MockManifest{ctrl: ctrl}
	mock.recorder = &_MockManifestRecorder{mock}
	return mock
}

func (_m *MockManifest) EXPECT() *_MockManifestRecorder {
	return _m.recorder
}

func (_m *MockManifest) AllDependencyVersions(_param0 string) []string {
	ret := _m.ctrl.Call(_m, "AllDependencyVersions", _param0)
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockManifestRecorder) AllDependencyVersions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllDependencyVersions", arg0)
}

func (_m *MockManifest) DefaultVersion(_param0 string) (libbuildpack.Dependency, error) {
	ret := _m.ctrl.Call(_m, "DefaultVersion", _param0)
	ret0, _ := ret[0].(libbuildpack.Dependency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManifestRecorder) DefaultVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DefaultVersion", arg0)
}

func (_m *MockManifest) InstallDependency(_param0 libbuildpack.Dependency, _param1 string) error {
	ret := _m.ctrl.Call(_m, "InstallDependency", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManifestRecorder) InstallDependency(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstallDependency", arg0, arg1)
}

func (_m *MockManifest) InstallOnlyVersion(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "InstallOnlyVersion", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManifestRecorder) InstallOnlyVersion(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstallOnlyVersion", arg0, arg1)
}

// Mock of NPM interface
type MockNPM struct {
	ctrl     *gomock.Controller
	recorder *_MockNPMRecorder
}

// Recorder for MockNPM (not exported)
type _MockNPMRecorder struct {
	mock *MockNPM
}

func NewMockNPM(ctrl *gomock.Controller) *MockNPM {
	mock := &MockNPM{ctrl: ctrl}
	mock.recorder = &_MockNPMRecorder{mock}
	return mock
}

func (_m *MockNPM) EXPECT() *_MockNPMRecorder {
	return _m.recorder
}

func (_m *MockNPM) Build() error {
	ret := _m.ctrl.Call(_m, "Build")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNPMRecorder) Build() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Build")
}

func (_m *MockNPM) Rebuild() error {
	ret := _m.ctrl.Call(_m, "Rebuild")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNPMRecorder) Rebuild() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rebuild")
}

// Mock of Yarn interface
type MockYarn struct {
	ctrl     *gomock.Controller
	recorder *_MockYarnRecorder
}

// Recorder for MockYarn (not exported)
type _MockYarnRecorder struct {
	mock *MockYarn
}

func NewMockYarn(ctrl *gomock.Controller) *MockYarn {
	mock := &MockYarn{ctrl: ctrl}
	mock.recorder = &_MockYarnRecorder{mock}
	return mock
}

func (_m *MockYarn) EXPECT() *_MockYarnRecorder {
	return _m.recorder
}

func (_m *MockYarn) Build() error {
	ret := _m.ctrl.Call(_m, "Build")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockYarnRecorder) Build() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Build")
}

// Mock of Stager interface
type MockStager struct {
	ctrl     *gomock.Controller
	recorder *_MockStagerRecorder
}

// Recorder for MockStager (not exported)
type _MockStagerRecorder struct {
	mock *MockStager
}

func NewMockStager(ctrl *gomock.Controller) *MockStager {
	mock := &MockStager{ctrl: ctrl}
	mock.recorder = &_MockStagerRecorder{mock}
	return mock
}

func (_m *MockStager) EXPECT() *_MockStagerRecorder {
	return _m.recorder
}

func (_m *MockStager) BuildDir() string {
	ret := _m.ctrl.Call(_m, "BuildDir")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockStagerRecorder) BuildDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildDir")
}

func (_m *MockStager) DepDir() string {
	ret := _m.ctrl.Call(_m, "DepDir")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockStagerRecorder) DepDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DepDir")
}

func (_m *MockStager) DepsIdx() string {
	ret := _m.ctrl.Call(_m, "DepsIdx")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockStagerRecorder) DepsIdx() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DepsIdx")
}

func (_m *MockStager) LinkDirectoryInDepDir(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "LinkDirectoryInDepDir", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStagerRecorder) LinkDirectoryInDepDir(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LinkDirectoryInDepDir", arg0, arg1)
}

func (_m *MockStager) WriteEnvFile(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "WriteEnvFile", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStagerRecorder) WriteEnvFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteEnvFile", arg0, arg1)
}

func (_m *MockStager) WriteProfileD(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "WriteProfileD", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStagerRecorder) WriteProfileD(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteProfileD", arg0, arg1)
}

func (_m *MockStager) SetStagingEnvironment() error {
	ret := _m.ctrl.Call(_m, "SetStagingEnvironment")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStagerRecorder) SetStagingEnvironment() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetStagingEnvironment")
}
